{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\".\n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop.\n * References:\n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/\n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nexport class OnePoleFilter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"OnePoleFilter\";\n    const options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    this._frequency = options.frequency;\n    this._type = options.type;\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this._createFilter();\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      frequency: 880,\n      type: \"lowpass\"\n    });\n  }\n  /**\n   * Create a filter and dispose the old one\n   */\n  _createFilter() {\n    const oldFilter = this._filter;\n    const freq = this.toFrequency(this._frequency);\n    const t = 1 / (2 * Math.PI * freq);\n    if (this._type === \"lowpass\") {\n      const a0 = 1 / (t * this.context.sampleRate);\n      const b1 = a0 - 1;\n      this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n    } else {\n      const b1 = 1 / (t * this.context.sampleRate) - 1;\n      this._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n    }\n    this.input.chain(this._filter, this.output);\n    if (oldFilter) {\n      // dispose it on the next block\n      this.context.setTimeout(() => {\n        if (!this.disposed) {\n          this.input.disconnect(oldFilter);\n          oldFilter.disconnect();\n        }\n      }, this.blockTime);\n    }\n  }\n  /**\n   * The frequency value.\n   */\n  get frequency() {\n    return this._frequency;\n  }\n  set frequency(fq) {\n    this._frequency = fq;\n    this._createFilter();\n  }\n  /**\n   * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n   */\n  get type() {\n    return this._type;\n  }\n  set type(t) {\n    this._type = t;\n    this._createFilter();\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n  getFrequencyResponse(len = 128) {\n    const freqValues = new Float32Array(len);\n    for (let i = 0; i < len; i++) {\n      const norm = Math.pow(i / len, 2);\n      const freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n    const magValues = new Float32Array(len);\n    const phaseValues = new Float32Array(len);\n    this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n    return magValues;\n  }\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this._filter.disconnect();\n    return this;\n  }\n}","map":{"version":3,"names":["ToneAudioNode","optionsFromArguments","Gain","OnePoleFilter","constructor","getDefaults","arguments","name","options","_frequency","frequency","_type","type","input","context","output","_createFilter","Object","assign","oldFilter","_filter","freq","toFrequency","t","Math","PI","a0","sampleRate","b1","createIIRFilter","chain","setTimeout","disposed","disconnect","blockTime","fq","getFrequencyResponse","len","freqValues","Float32Array","i","norm","pow","magValues","phaseValues","dispose"],"sources":["../../../../Tone/component/filter/OnePoleFilter.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}