{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n    this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n    this.output = undefined;\n    /**\n     * The low band.\n     */\n    this.low = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n    this._lowMidFilter = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n    this.mid = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n    this.high = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    this._internalChannels = [this.low, this.mid, this.high];\n    const options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    this.lowFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    this.highFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.input.fan(this.low, this.high);\n    this.input.chain(this._lowMidFilter, this.mid);\n    // the frequency control signal\n    this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n    this.highFrequency.fan(this.mid.frequency, this.high.frequency);\n    // the Q value\n    this.Q.connect(this.low.Q);\n    this.Q.connect(this._lowMidFilter.Q);\n    this.Q.connect(this.mid.Q);\n    this.Q.connect(this.high.Q);\n    readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      highFrequency: 2500,\n      lowFrequency: 400\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    this.low.dispose();\n    this._lowMidFilter.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this.Q.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","Signal","Filter","MultibandSplit","constructor","getDefaults","arguments","name","input","context","output","undefined","low","frequency","type","_lowMidFilter","mid","high","_internalChannels","options","lowFrequency","units","value","highFrequency","Q","fan","chain","connect","Object","assign","dispose"],"sources":["../../../../Tone/component/channel/MultibandSplit.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}