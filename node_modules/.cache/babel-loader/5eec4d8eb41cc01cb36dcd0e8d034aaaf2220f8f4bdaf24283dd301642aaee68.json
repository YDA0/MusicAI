{"ast":null,"code":"import { Filter } from \"../component/filter/Filter\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate\n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nexport class AutoFilter extends LFOEffect {\n  constructor() {\n    super(optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n    this.name = \"AutoFilter\";\n    const options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n    this.filter = new Filter(Object.assign(options.filter, {\n      context: this.context\n    }));\n    // connections\n    this.connectEffect(this.filter);\n    this._lfo.connect(this.filter.frequency);\n    this.octaves = options.octaves;\n    this.baseFrequency = options.baseFrequency;\n  }\n  static getDefaults() {\n    return Object.assign(LFOEffect.getDefaults(), {\n      baseFrequency: 200,\n      octaves: 2.6,\n      filter: {\n        type: \"lowpass\",\n        rolloff: -12,\n        Q: 1\n      }\n    });\n  }\n  /**\n   * The minimum value of the filter's cutoff frequency.\n   */\n  get baseFrequency() {\n    return this._lfo.min;\n  }\n  set baseFrequency(freq) {\n    this._lfo.min = this.toFrequency(freq);\n    // and set the max\n    this.octaves = this._octaves;\n  }\n  /**\n   * The maximum value of the filter's cutoff frequency.\n   */\n  get octaves() {\n    return this._octaves;\n  }\n  set octaves(oct) {\n    this._octaves = oct;\n    this._lfo.max = this._lfo.min * Math.pow(2, oct);\n  }\n  dispose() {\n    super.dispose();\n    this.filter.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Filter","optionsFromArguments","LFOEffect","AutoFilter","constructor","getDefaults","arguments","name","options","filter","Object","assign","context","connectEffect","_lfo","connect","frequency","octaves","baseFrequency","type","rolloff","Q","min","freq","toFrequency","_octaves","oct","max","Math","pow","dispose"],"sources":["../../../Tone/effect/AutoFilter.ts"],"sourcesContent":[null],"mappings":"AACA,SAASA,MAAM,QAAuB,4BAA4B;AAElE,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,SAAS,QAA0B,aAAa;AAQzD;;;;;;;;;;;;AAYA,OAAM,MAAOC,UAAW,SAAQD,SAA4B;EAqB3DE,YAAA;IAEC,KAAK,CAACH,oBAAoB,CAACE,UAAU,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC,CAAC;IArBnG,KAAAC,IAAI,GAAW,YAAY;IAsBnC,MAAMC,OAAO,GAAGP,oBAAoB,CAACE,UAAU,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;IAEpH,IAAI,CAACG,MAAM,GAAG,IAAIT,MAAM,CAACU,MAAM,CAACC,MAAM,CAACH,OAAO,CAACC,MAAM,EAAE;MACtDG,OAAO,EAAE,IAAI,CAACA;KACd,CAAC,CAAC;IAEH;IACA,IAAI,CAACC,aAAa,CAAC,IAAI,CAACJ,MAAM,CAAC;IAC/B,IAAI,CAACK,IAAI,CAACC,OAAO,CAAC,IAAI,CAACN,MAAM,CAACO,SAAS,CAAC;IACxC,IAAI,CAACC,OAAO,GAAGT,OAAO,CAACS,OAAO;IAC9B,IAAI,CAACC,aAAa,GAAGV,OAAO,CAACU,aAAa;EAC3C;EAEA,OAAOb,WAAWA,CAAA;IACjB,OAAOK,MAAM,CAACC,MAAM,CAACT,SAAS,CAACG,WAAW,EAAE,EAAE;MAC7Ca,aAAa,EAAE,GAAG;MAClBD,OAAO,EAAE,GAAG;MACZR,MAAM,EAAE;QACPU,IAAI,EAAE,SAAsB;QAC5BC,OAAO,EAAE,CAAC,EAAS;QACnBC,CAAC,EAAE;;KAEJ,CAAC;EACH;EAEA;;;EAGA,IAAIH,aAAaA,CAAA;IAChB,OAAO,IAAI,CAACJ,IAAI,CAACQ,GAAG;EACrB;EACA,IAAIJ,aAAaA,CAACK,IAAI;IACrB,IAAI,CAACT,IAAI,CAACQ,GAAG,GAAG,IAAI,CAACE,WAAW,CAACD,IAAI,CAAC;IACtC;IACA,IAAI,CAACN,OAAO,GAAG,IAAI,CAACQ,QAAQ;EAC7B;EAEA;;;EAGA,IAAIR,OAAOA,CAAA;IACV,OAAO,IAAI,CAACQ,QAAQ;EACrB;EACA,IAAIR,OAAOA,CAACS,GAAG;IACd,IAAI,CAACD,QAAQ,GAAGC,GAAG;IACnB,IAAI,CAACZ,IAAI,CAACa,GAAG,GAAG,IAAI,CAACb,IAAI,CAACQ,GAAG,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,GAAG,CAAC;EACjD;EAEAI,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACrB,MAAM,CAACqB,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}