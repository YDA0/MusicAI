{"ast":null,"code":"import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport class ToneWithContext extends Tone {\n  constructor() {\n    super();\n    const options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n    if (this.defaultContext) {\n      this.context = this.defaultContext;\n    } else {\n      this.context = options.context;\n    }\n  }\n  static getDefaults() {\n    return {\n      context: getContext()\n    };\n  }\n  /**\n   * Return the current time of the Context clock plus the lookAhead.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(Tone.now());\n   * }, 100);\n   */\n  now() {\n    return this.context.currentTime + this.context.lookAhead;\n  }\n  /**\n   * Return the current time of the Context clock without any lookAhead.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(Tone.immediate());\n   * }, 100);\n   */\n  immediate() {\n    return this.context.currentTime;\n  }\n  /**\n   * The duration in seconds of one sample.\n   * @example\n   * console.log(Tone.Transport.sampleTime);\n   */\n  get sampleTime() {\n    return 1 / this.context.sampleRate;\n  }\n  /**\n   * The number of seconds of 1 processing block (128 samples)\n   * @example\n   * console.log(Tone.Destination.blockTime);\n   */\n  get blockTime() {\n    return 128 / this.context.sampleRate;\n  }\n  /**\n   * Convert the incoming time to seconds.\n   * This is calculated against the current [[Tone.Transport]] bpm\n   * @example\n   * const gain = new Tone.Gain();\n   * setInterval(() => console.log(gain.toSeconds(\"4n\")), 100);\n   * // ramp the tempo to 60 bpm over 30 seconds\n   * Tone.getTransport().bpm.rampTo(60, 30);\n   */\n  toSeconds(time) {\n    return new TimeClass(this.context, time).toSeconds();\n  }\n  /**\n   * Convert the input to a frequency number\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toFrequency(\"4n\"));\n   */\n  toFrequency(freq) {\n    return new FrequencyClass(this.context, freq).toFrequency();\n  }\n  /**\n   * Convert the input time into ticks\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toTicks(\"4n\"));\n   */\n  toTicks(time) {\n    return new TransportTimeClass(this.context, time).toTicks();\n  }\n  //-------------------------------------\n  // \tGET/SET\n  //-------------------------------------\n  /**\n   * Get a subset of the properties which are in the partial props\n   */\n  _getPartialProperties(props) {\n    const options = this.get();\n    // remove attributes from the prop that are not in the partial\n    Object.keys(options).forEach(name => {\n      if (isUndef(props[name])) {\n        delete options[name];\n      }\n    });\n    return options;\n  }\n  /**\n   * Get the object's attributes.\n   * @example\n   * const osc = new Tone.Oscillator();\n   * console.log(osc.get());\n   */\n  get() {\n    const defaults = getDefaultsFromInstance(this);\n    Object.keys(defaults).forEach(attribute => {\n      if (Reflect.has(this, attribute)) {\n        const member = this[attribute];\n        if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n          defaults[attribute] = member.value;\n        } else if (member instanceof ToneWithContext) {\n          defaults[attribute] = member._getPartialProperties(defaults[attribute]);\n          // otherwise make sure it's a serializable type\n        } else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n          defaults[attribute] = member;\n        } else {\n          // remove all undefined and unserializable attributes\n          delete defaults[attribute];\n        }\n      }\n    });\n    return defaults;\n  }\n  /**\n   * Set multiple properties at once with an object.\n   * @example\n   * const filter = new Tone.Filter().toDestination();\n   * // set values using an object\n   * filter.set({\n   * \tfrequency: \"C6\",\n   * \ttype: \"highpass\"\n   * });\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3\").connect(filter);\n   * player.autostart = true;\n   */\n  set(props) {\n    Object.keys(props).forEach(attribute => {\n      if (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n        if (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n          // small optimization\n          if (this[attribute].value !== props[attribute]) {\n            this[attribute].value = props[attribute];\n          }\n        } else if (this[attribute] instanceof ToneWithContext) {\n          this[attribute].set(props[attribute]);\n        } else {\n          this[attribute] = props[attribute];\n        }\n      }\n    });\n    return this;\n  }\n}","map":{"version":3,"names":["getContext","Tone","FrequencyClass","TimeClass","TransportTimeClass","getDefaultsFromInstance","optionsFromArguments","isArray","isBoolean","isDefined","isNumber","isString","isUndef","ToneWithContext","constructor","options","getDefaults","arguments","defaultContext","context","now","currentTime","lookAhead","immediate","sampleTime","sampleRate","blockTime","toSeconds","time","toFrequency","freq","toTicks","_getPartialProperties","props","get","Object","keys","forEach","name","defaults","attribute","Reflect","has","member","value","setValueAtTime","set"],"sources":["../../../../Tone/core/context/ToneWithContext.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}