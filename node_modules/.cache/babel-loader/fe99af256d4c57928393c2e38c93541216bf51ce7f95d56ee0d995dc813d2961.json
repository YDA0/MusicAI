{"ast":null,"code":"import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\nexport class Gain extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n    this.name = \"Gain\";\n    /**\n     * The wrapped GainNode.\n     */\n    this._gainNode = this.context.createGain();\n    // input = output\n    this.input = this._gainNode;\n    this.output = this._gainNode;\n    const options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n    this.gain = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._gainNode.gain,\n      units: options.units,\n      value: options.gain,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    readOnly(this, \"gain\");\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      gain: 1,\n      units: \"gain\"\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._gainNode.disconnect();\n    this.gain.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Param","optionsFromArguments","readOnly","ToneAudioNode","Gain","constructor","getDefaults","arguments","name","_gainNode","context","createGain","input","output","options","gain","convert","param","units","value","minValue","maxValue","Object","assign","dispose","disconnect"],"sources":["../../../../Tone/core/context/Gain.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,KAAK,QAAQ,kBAAkB;AAExC,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,aAAa,QAA8B,iBAAiB;AAUrE;;;;;;;;;;;;;AAaA,OAAM,MAAOC,IAAoE,SAAQD,aAAoC;EA6B5HE,YAAA;IACC,KAAK,CAACJ,oBAAoB,CAACG,IAAI,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IA5BrE,KAAAC,IAAI,GAAW,MAAM;IAY9B;;;IAGQ,KAAAC,SAAS,GAAa,IAAI,CAACC,OAAO,CAACC,UAAU,EAAE;IAEvD;IACS,KAAAC,KAAK,GAAa,IAAI,CAACH,SAAS;IAChC,KAAAI,MAAM,GAAa,IAAI,CAACJ,SAAS;IAUzC,MAAMK,OAAO,GAAGb,oBAAoB,CAACG,IAAI,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAEtF,IAAI,CAACQ,IAAI,GAAG,IAAIf,KAAK,CAAC;MACrBU,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBM,OAAO,EAAEF,OAAO,CAACE,OAAO;MACxBC,KAAK,EAAE,IAAI,CAACR,SAAS,CAACM,IAAI;MAC1BG,KAAK,EAAEJ,OAAO,CAACI,KAAK;MACpBC,KAAK,EAAEL,OAAO,CAACC,IAAI;MACnBK,QAAQ,EAAEN,OAAO,CAACM,QAAQ;MAC1BC,QAAQ,EAAEP,OAAO,CAACO;KAClB,CAAC;IACFnB,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;EACvB;EAEA,OAAOI,WAAWA,CAAA;IACjB,OAAOgB,MAAM,CAACC,MAAM,CAACpB,aAAa,CAACG,WAAW,EAAE,EAAE;MACjDU,OAAO,EAAE,IAAI;MACbD,IAAI,EAAE,CAAC;MACPG,KAAK,EAAE;KACP,CAAC;EACH;EAEA;;;EAGAM,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACf,SAAS,CAACgB,UAAU,EAAE;IAC3B,IAAI,CAACV,IAAI,CAACS,OAAO,EAAE;IACnB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}