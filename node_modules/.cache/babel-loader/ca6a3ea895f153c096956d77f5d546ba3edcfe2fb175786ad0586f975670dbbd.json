{"ast":null,"code":"import { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\nexport class PanVol extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n    this.name = \"PanVol\";\n    const options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n    this._panner = this.input = new Panner({\n      context: this.context,\n      pan: options.pan,\n      channelCount: options.channelCount\n    });\n    this.pan = this._panner.pan;\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    // connections\n    this._panner.connect(this._volume);\n    this.mute = options.mute;\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      pan: 0,\n      volume: 0,\n      channelCount: 1\n    });\n  }\n  /**\n   * Mute/unmute the volume\n   */\n  get mute() {\n    return this._volume.mute;\n  }\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  dispose() {\n    super.dispose();\n    this._panner.dispose();\n    this.pan.dispose();\n    this._volume.dispose();\n    this.volume.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["readOnly","ToneAudioNode","optionsFromArguments","Panner","Volume","PanVol","constructor","getDefaults","arguments","name","options","_panner","input","context","pan","channelCount","_volume","output","volume","connect","mute","Object","assign","dispose"],"sources":["../../../../Tone/component/channel/PanVol.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,QAAQ,QAAQ,2BAA2B;AAEpD,SAAgCC,aAAa,QAA8B,kCAAkC;AAE7G,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,MAAM,QAAQ,UAAU;AASjC;;;;;;;;AAQA,OAAM,MAAOC,MAAO,SAAQJ,aAA4B;EAmCvDK,YAAA;IAEC,KAAK,CAACJ,oBAAoB,CAACG,MAAM,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IAnCvE,KAAAC,IAAI,GAAW,QAAQ;IAoC/B,MAAMC,OAAO,GAAGR,oBAAoB,CAACG,MAAM,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAExF,IAAI,CAACG,OAAO,GAAG,IAAI,CAACC,KAAK,GAAG,IAAIT,MAAM,CAAC;MACtCU,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,GAAG,EAAEJ,OAAO,CAACI,GAAG;MAChBC,YAAY,EAAEL,OAAO,CAACK;KACtB,CAAC;IACF,IAAI,CAACD,GAAG,GAAG,IAAI,CAACH,OAAO,CAACG,GAAG;IAC3B,IAAI,CAACE,OAAO,GAAG,IAAI,CAACC,MAAM,GAAG,IAAIb,MAAM,CAAC;MACvCS,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBK,MAAM,EAAER,OAAO,CAACQ;KAChB,CAAC;IACF,IAAI,CAACA,MAAM,GAAG,IAAI,CAACF,OAAO,CAACE,MAAM;IAEjC;IACA,IAAI,CAACP,OAAO,CAACQ,OAAO,CAAC,IAAI,CAACH,OAAO,CAAC;IAClC,IAAI,CAACI,IAAI,GAAGV,OAAO,CAACU,IAAI;IAExBpB,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;EAClC;EAEA,OAAOO,WAAWA,CAAA;IACjB,OAAOc,MAAM,CAACC,MAAM,CAACrB,aAAa,CAACM,WAAW,EAAE,EAAE;MACjDa,IAAI,EAAE,KAAK;MACXN,GAAG,EAAE,CAAC;MACNI,MAAM,EAAE,CAAC;MACTH,YAAY,EAAE;KACd,CAAC;EACH;EAEA;;;EAGA,IAAIK,IAAIA,CAAA;IACP,OAAO,IAAI,CAACJ,OAAO,CAACI,IAAI;EACzB;EACA,IAAIA,IAAIA,CAACA,IAAI;IACZ,IAAI,CAACJ,OAAO,CAACI,IAAI,GAAGA,IAAI;EACzB;EAEAG,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACZ,OAAO,CAACY,OAAO,EAAE;IACtB,IAAI,CAACT,GAAG,CAACS,OAAO,EAAE;IAClB,IAAI,CAACP,OAAO,CAACO,OAAO,EAAE;IACtB,IAAI,CAACL,MAAM,CAACK,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}