{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument } from \"../instrument/Instrument\";\nimport { timeRange } from \"../core/util/Decorator\";\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport class Monophonic extends Instrument {\n  constructor() {\n    super(optionsFromArguments(Monophonic.getDefaults(), arguments));\n    const options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n    this.portamento = options.portamento;\n    this.onsilence = options.onsilence;\n  }\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      detune: 0,\n      onsilence: noOp,\n      portamento: 0\n    });\n  }\n  /**\n   * Trigger the attack of the note optionally with a given velocity.\n   * @param  note The note to trigger.\n   * @param  time When the note should start.\n   * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * // trigger the note a half second from now at half velocity\n   * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n   */\n  triggerAttack(note, time, velocity = 1) {\n    this.log(\"triggerAttack\", note, time, velocity);\n    const seconds = this.toSeconds(time);\n    this._triggerEnvelopeAttack(seconds, velocity);\n    this.setNote(note, seconds);\n    return this;\n  }\n  /**\n   * Trigger the release portion of the envelope\n   * @param  time If no time is given, the release happens immediatly\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * synth.triggerAttack(\"C4\");\n   * // trigger the release a second from now\n   * synth.triggerRelease(\"+1\");\n   */\n  triggerRelease(time) {\n    this.log(\"triggerRelease\", time);\n    const seconds = this.toSeconds(time);\n    this._triggerEnvelopeRelease(seconds);\n    return this;\n  }\n  /**\n   * Set the note at the given time. If no time is given, the note\n   * will set immediately.\n   * @param note The note to change to.\n   * @param  time The time when the note should be set.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * synth.triggerAttack(\"C4\");\n   * // change to F#6 in one quarter note from now.\n   * synth.setNote(\"F#6\", \"+4n\");\n   */\n  setNote(note, time) {\n    const computedTime = this.toSeconds(time);\n    const computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n    if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n      const portTime = this.toSeconds(this.portamento);\n      this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n    } else {\n      this.frequency.setValueAtTime(computedFrequency, computedTime);\n    }\n    return this;\n  }\n}\n__decorate([timeRange(0)], Monophonic.prototype, \"portamento\", void 0);","map":{"version":3,"names":["FrequencyClass","optionsFromArguments","noOp","Instrument","timeRange","Monophonic","constructor","getDefaults","arguments","options","portamento","onsilence","Object","assign","detune","triggerAttack","note","time","velocity","log","seconds","toSeconds","_triggerEnvelopeAttack","setNote","triggerRelease","_triggerEnvelopeRelease","computedTime","computedFrequency","toFrequency","getLevelAtTime","portTime","frequency","exponentialRampTo","setValueAtTime","__decorate"],"sources":["../../../Tone/instrument/Monophonic.ts"],"sourcesContent":[null],"mappings":";AAAA,SAASA,cAAc,QAAQ,wBAAwB;AAEvD,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,IAAI,QAAQ,wBAAwB;AAC7C,SAASC,UAAU,QAA2B,0BAA0B;AAExE,SAASC,SAAS,QAAQ,wBAAwB;AAUlD;;;AAGA,OAAM,MAAgBC,UAA8C,SAAQF,UAAmB;EAwB9FG,YAAA;IAEC,KAAK,CAACL,oBAAoB,CAACI,UAAU,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC,CAAC;IAChE,MAAMC,OAAO,GAAGR,oBAAoB,CAACI,UAAU,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC;IAEzE,IAAI,CAACE,UAAU,GAAGD,OAAO,CAACC,UAAU;IACpC,IAAI,CAACC,SAAS,GAAGF,OAAO,CAACE,SAAS;EACnC;EAEA,OAAOJ,WAAWA,CAAA;IACjB,OAAOK,MAAM,CAACC,MAAM,CAACV,UAAU,CAACI,WAAW,EAAE,EAAE;MAC9CO,MAAM,EAAE,CAAC;MACTH,SAAS,EAAET,IAAI;MACfQ,UAAU,EAAE;KACZ,CAAC;EACH;EAEA;;;;;;;;;;EAUAK,aAAaA,CAACC,IAAgC,EAAEC,IAAW,EAAEC,QAAA,GAAwB,CAAC;IACrF,IAAI,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,EAAEC,IAAI,EAAEC,QAAQ,CAAC;IAC/C,MAAME,OAAO,GAAG,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;IACpC,IAAI,CAACK,sBAAsB,CAACF,OAAO,EAAEF,QAAQ,CAAC;IAC9C,IAAI,CAACK,OAAO,CAACP,IAAI,EAAEI,OAAO,CAAC;IAC3B,OAAO,IAAI;EACZ;EAEA;;;;;;;;;EASAI,cAAcA,CAACP,IAAW;IACzB,IAAI,CAACE,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC;IAChC,MAAMG,OAAO,GAAG,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;IACpC,IAAI,CAACQ,uBAAuB,CAACL,OAAO,CAAC;IACrC,OAAO,IAAI;EACZ;EAoBA;;;;;;;;;;;EAWAG,OAAOA,CAACP,IAAgC,EAAEC,IAAW;IACpD,MAAMS,YAAY,GAAG,IAAI,CAACL,SAAS,CAACJ,IAAI,CAAC;IACzC,MAAMU,iBAAiB,GAAGX,IAAI,YAAYhB,cAAc,GAAGgB,IAAI,CAACY,WAAW,EAAE,GAAGZ,IAAI;IACpF,IAAI,IAAI,CAACN,UAAU,GAAG,CAAC,IAAI,IAAI,CAACmB,cAAc,CAACH,YAAY,CAAC,GAAG,IAAI,EAAE;MACpE,MAAMI,QAAQ,GAAG,IAAI,CAACT,SAAS,CAAC,IAAI,CAACX,UAAU,CAAC;MAChD,IAAI,CAACqB,SAAS,CAACC,iBAAiB,CAACL,iBAAiB,EAAEG,QAAQ,EAAEJ,YAAY,CAAC;KAC3E,MAAM;MACN,IAAI,CAACK,SAAS,CAACE,cAAc,CAACN,iBAAiB,EAAED,YAAY,CAAC;;IAE/D,OAAO,IAAI;EACZ;;AA5GAQ,UAAA,EADC9B,SAAS,CAAC,CAAC,CAAC,C,6CACO"},"metadata":{},"sourceType":"module","externalDependencies":[]}