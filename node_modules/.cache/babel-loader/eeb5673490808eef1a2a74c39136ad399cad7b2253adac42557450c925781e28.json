{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as Tone from 'tone';\nexport default {\n  name: 'AIComposerPage',\n  data() {\n    return {\n      selectedGenre: 'pop',\n      selectedMood: 'happy',\n      generatedMusicUrl: ''\n    };\n  },\n  methods: {\n    generateMusic() {\n      // 선택된 장르와 분위기에 따라 음악을 생성하고, generatedMusicUrl에 음악 파일 URL을 할당합니다.\n      const synth = new Tone.Synth().toDestination();\n      const note = this.selectedGenre === 'pop' ? 'C4' : this.selectedGenre === 'rock' ? 'E4' : 'A4';\n      synth.triggerAttackRelease(note, '4n');\n      const player = new Tone.Player().toDestination();\n      const buffer = Tone.Offline(() => {\n        player.load(synth.toMaster());\n        player.start();\n      }).then(buffer => {\n        const blob = new Blob([Tone.Buffer.encodeWAV(buffer)], {\n          type: 'audio/wav'\n        });\n        this.generatedMusicUrl = URL.createObjectURL(blob);\n      });\n    },\n    toListPage() {\n      this.$router.push('/board');\n    }\n  }\n};","map":{"version":3,"names":["Tone","name","data","selectedGenre","selectedMood","generatedMusicUrl","methods","generateMusic","synth","Synth","toDestination","note","triggerAttackRelease","player","Player","buffer","Offline","load","toMaster","start","then","blob","Blob","Buffer","encodeWAV","type","URL","createObjectURL","toListPage","$router","push"],"sources":["/Users/yundayoung/Desktop/workspace/MUSICAI/src/views/main/composition.vue"],"sourcesContent":["<template>\n    <div>\n        <main>\n            <div style=\"margin-bottom: 80px;\">\n                <h1 class=\"p\">Music Creation</h1>\n                <p class=\"p\">나만의 음악을 만들 수 있어요!</p>\n            </div>\n            <section>\n                <h2>음악 생성</h2>\n                <hr>\n                <br>\n                <form @submit.prevent=\"generateMusic\">\n                    <label for=\"genre\">장르</label>\n                    <select name=\"genre\" id=\"genre\" v-model=\"selectedGenre\">\n                        <option value=\"pop\">Pop</option>\n                        <option value=\"rock\">Rock</option>\n                        <option value=\"classical\">Classical</option>\n                    </select>\n                    <br>\n                    <label for=\"mood\">분위기</label>\n                    <select name=\"mood\" id=\"mood\" v-model=\"selectedMood\">\n                        <option value=\"happy\">Happy</option>\n                        <option value=\"sad\">Sad</option>\n                        <option value=\"calm\">Calm</option>\n                    </select>\n                    <br>\n                    <div class=\"btn-container\">\n                        <button class=\"btn\">생성</button>\n                    </div>\n                </form>\n            </section>\n            <section>\n                <h2>생성된 음악</h2>\n                <audio :src=\"generatedMusicUrl\" controls></audio>\n            </section>\n            <div class=\"btn-container\">\n                <button class=\"btn\" @click=\"toListPage\">가사작성</button>\n            </div>\n        </main>\n    </div>\n</template>\n  \n<script>\nimport * as Tone from 'tone';\n\nexport default {\n    name: 'AIComposerPage',\n    data() {\n        return {\n            selectedGenre: 'pop',\n            selectedMood: 'happy',\n            generatedMusicUrl: ''\n        };\n    },\n    methods: {\n        generateMusic() {\n            // 선택된 장르와 분위기에 따라 음악을 생성하고, generatedMusicUrl에 음악 파일 URL을 할당합니다.\n            const synth = new Tone.Synth().toDestination();\n            const note = this.selectedGenre === 'pop' ? 'C4' : this.selectedGenre === 'rock' ? 'E4' : 'A4';\n            synth.triggerAttackRelease(note, '4n');\n\n            const player = new Tone.Player().toDestination();\n            const buffer = Tone.Offline(() => {\n                player.load(synth.toMaster());\n                player.start();\n            }).then(buffer => {\n                const blob = new Blob([Tone.Buffer.encodeWAV(buffer)], { type: 'audio/wav' });\n                this.generatedMusicUrl = URL.createObjectURL(blob);\n            });\n        },\n        toListPage() {\n            this.$router.push('/board');\n        }\n    }\n};\n</script>\n  \n<style scoped>\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n}\n\nh1 {\n    margin: 0;\n}\n\nmain {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nsection {\n    margin-bottom: 40px;\n}\n\nform {\n    display: flex;\n    flex-direction: column;\n}\n\nlabel {\n    margin-bottom: 15px;\n}\n\nselect {\n    border: 1px solid #000;\n    border-radius: 5px;\n    padding: 8px;\n}\n\n.btn {\n    margin-top: 20px;\n    padding: 10px;\n    border-radius: 5px;\n    border: none;\n    background-color: #333;\n    color: #fff;\n    cursor: pointer;\n    width: 35%;\n}\n\n.btn:hover {\n    background-color: #555;\n}\n\n.btn-container {\n    text-align: center;\n}\n\naudio {\n    width: 100%;\n    margin-top: 20px;\n}\n\nhr {\n    margin-top: 10px;\n    margin-bottom: 10px;\n    border-width: 2px;\n}\n</style>\n  "],"mappings":";AA2CA,OAAO,KAAKA,IAAG,MAAO,MAAM;AAE5B,eAAe;EACXC,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,aAAa,EAAE,KAAK;MACpBC,YAAY,EAAE,OAAO;MACrBC,iBAAiB,EAAE;IACvB,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,aAAaA,CAAA,EAAG;MACZ;MACA,MAAMC,KAAI,GAAI,IAAIR,IAAI,CAACS,KAAK,EAAE,CAACC,aAAa,EAAE;MAC9C,MAAMC,IAAG,GAAI,IAAI,CAACR,aAAY,KAAM,KAAI,GAAI,IAAG,GAAI,IAAI,CAACA,aAAY,KAAM,MAAK,GAAI,IAAG,GAAI,IAAI;MAC9FK,KAAK,CAACI,oBAAoB,CAACD,IAAI,EAAE,IAAI,CAAC;MAEtC,MAAME,MAAK,GAAI,IAAIb,IAAI,CAACc,MAAM,EAAE,CAACJ,aAAa,EAAE;MAChD,MAAMK,MAAK,GAAIf,IAAI,CAACgB,OAAO,CAAC,MAAM;QAC9BH,MAAM,CAACI,IAAI,CAACT,KAAK,CAACU,QAAQ,EAAE,CAAC;QAC7BL,MAAM,CAACM,KAAK,EAAE;MAClB,CAAC,CAAC,CAACC,IAAI,CAACL,MAAK,IAAK;QACd,MAAMM,IAAG,GAAI,IAAIC,IAAI,CAAC,CAACtB,IAAI,CAACuB,MAAM,CAACC,SAAS,CAACT,MAAM,CAAC,CAAC,EAAE;UAAEU,IAAI,EAAE;QAAY,CAAC,CAAC;QAC7E,IAAI,CAACpB,iBAAgB,GAAIqB,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;MACtD,CAAC,CAAC;IACN,CAAC;IACDO,UAAUA,CAAA,EAAG;MACT,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IAC/B;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}