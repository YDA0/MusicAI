{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport class AMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    this.name = \"AMOscillator\";\n    /**\n     * convert the -1,1 output to 0,1\n     */\n    this._modulationScale = new AudioToGain({\n      context: this.context\n    });\n    /**\n     * the node where the modulation happens\n     */\n    this._modulationNode = new Gain({\n      context: this.context\n    });\n    const options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    this._carrier = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: options.type\n    });\n    this.frequency = this._carrier.frequency, this.detune = this._carrier.detune;\n    this._modulator = new Oscillator({\n      context: this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    // connections\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n    this._carrier.chain(this._modulationNode, this.output);\n    readOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationType: \"square\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    this._modulator.start(time);\n    this._carrier.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    this._modulator.stop(time);\n    this._carrier.stop(time);\n  }\n  _restart(time) {\n    this._modulator.restart(time);\n    this._carrier.restart(time);\n  }\n  /**\n   * The type of the carrier oscillator\n   */\n  get type() {\n    return this._carrier.type;\n  }\n  set type(type) {\n    this._carrier.type = type;\n  }\n  get baseType() {\n    return this._carrier.baseType;\n  }\n  set baseType(baseType) {\n    this._carrier.baseType = baseType;\n  }\n  get partialCount() {\n    return this._carrier.partialCount;\n  }\n  set partialCount(partialCount) {\n    this._carrier.partialCount = partialCount;\n  }\n  /**\n   * The type of the modulator oscillator\n   */\n  get modulationType() {\n    return this._modulator.type;\n  }\n  set modulationType(type) {\n    this._modulator.type = type;\n  }\n  get phase() {\n    return this._carrier.phase;\n  }\n  set phase(phase) {\n    this._carrier.phase = phase;\n    this._modulator.phase = phase;\n  }\n  get partials() {\n    return this._carrier.partials;\n  }\n  set partials(partials) {\n    this._carrier.partials = partials;\n  }\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n    this._carrier.dispose();\n    this._modulator.dispose();\n    this._modulationNode.dispose();\n    this._modulationScale.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","optionsFromArguments","readOnly","AudioToGain","Multiply","Source","Oscillator","generateWaveform","AMOscillator","constructor","getDefaults","arguments","name","_modulationScale","context","_modulationNode","options","_carrier","detune","frequency","onstop","phase","type","_modulator","modulationType","harmonicity","units","value","chain","gain","output","Object","assign","_start","time","start","_stop","stop","_restart","restart","baseType","partialCount","partials","asArray","length","dispose"],"sources":["../../../../Tone/source/oscillator/AMOscillator.ts"],"sourcesContent":[null],"mappings":";AAAA,SAASA,IAAI,QAAQ,yBAAyB;AAE9C,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,QAAQ,QAAQ,uBAAuB;AAEhD,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAECC,gBAAgB,QAGV,uBAAuB;AAI9B;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,MAAOC,YAAa,SAAQH,MAA2B;EAqD5DI,YAAA;IAEC,KAAK,CAACR,oBAAoB,CAACO,YAAY,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC;IArDnG,KAAAC,IAAI,GAAW,cAAc;IAetC;;;IAGQ,KAAAC,gBAAgB,GAAG,IAAIV,WAAW,CAAC;MAAEW,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAmBrE;;;IAGQ,KAAAC,eAAe,GAAG,IAAIf,IAAI,CAAC;MAClCc,OAAO,EAAE,IAAI,CAACA;KACd,CAAC;IAYD,MAAME,OAAO,GAAGf,oBAAoB,CAACO,YAAY,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;IAEpH,IAAI,CAACM,QAAQ,GAAG,IAAIX,UAAU,CAAC;MAC9BQ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBI,MAAM,EAAEF,OAAO,CAACE,MAAM;MACtBC,SAAS,EAAEH,OAAO,CAACG,SAAS;MAC5BC,MAAM,EAAEA,CAAA,KAAM,IAAI,CAACA,MAAM,CAAC,IAAI,CAAC;MAC/BC,KAAK,EAAEL,OAAO,CAACK,KAAK;MACpBC,IAAI,EAAEN,OAAO,CAACM;KACO,CAAC;IACvB,IAAI,CAACH,SAAS,GAAG,IAAI,CAACF,QAAQ,CAACE,SAAS,EACxC,IAAI,CAACD,MAAM,GAAG,IAAI,CAACD,QAAQ,CAACC,MAAM;IAElC,IAAI,CAACK,UAAU,GAAG,IAAIjB,UAAU,CAAC;MAChCQ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBO,KAAK,EAAEL,OAAO,CAACK,KAAK;MACpBC,IAAI,EAAEN,OAAO,CAACQ;KACO,CAAC;IAEvB,IAAI,CAACC,WAAW,GAAG,IAAIrB,QAAQ,CAAC;MAC/BU,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBY,KAAK,EAAE,UAAU;MACjBC,KAAK,EAAEX,OAAO,CAACS;KACf,CAAC;IAEF;IACA,IAAI,CAACN,SAAS,CAACS,KAAK,CAAC,IAAI,CAACH,WAAW,EAAE,IAAI,CAACF,UAAU,CAACJ,SAAS,CAAC;IACjE,IAAI,CAACI,UAAU,CAACK,KAAK,CAAC,IAAI,CAACf,gBAAgB,EAAE,IAAI,CAACE,eAAe,CAACc,IAAI,CAAC;IACvE,IAAI,CAACZ,QAAQ,CAACW,KAAK,CAAC,IAAI,CAACb,eAAe,EAAE,IAAI,CAACe,MAAM,CAAC;IAEtD5B,QAAQ,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;EACvD;EAEA,OAAOQ,WAAWA,CAAA;IACjB,OAAOqB,MAAM,CAACC,MAAM,CAAC1B,UAAU,CAACI,WAAW,EAAE,EAAE;MAC9Ce,WAAW,EAAE,CAAC;MACdD,cAAc,EAAE;KAChB,CAAC;EACH;EAEA;;;EAGUS,MAAMA,CAACC,IAAa;IAC7B,IAAI,CAACX,UAAU,CAACY,KAAK,CAACD,IAAI,CAAC;IAC3B,IAAI,CAACjB,QAAQ,CAACkB,KAAK,CAACD,IAAI,CAAC;EAC1B;EAEA;;;EAGUE,KAAKA,CAACF,IAAa;IAC5B,IAAI,CAACX,UAAU,CAACc,IAAI,CAACH,IAAI,CAAC;IAC1B,IAAI,CAACjB,QAAQ,CAACoB,IAAI,CAACH,IAAI,CAAC;EACzB;EAEUI,QAAQA,CAACJ,IAAa;IAC/B,IAAI,CAACX,UAAU,CAACgB,OAAO,CAACL,IAAI,CAAC;IAC7B,IAAI,CAACjB,QAAQ,CAACsB,OAAO,CAACL,IAAI,CAAC;EAC5B;EAEA;;;EAGA,IAAIZ,IAAIA,CAAA;IACP,OAAO,IAAI,CAACL,QAAQ,CAACK,IAAI;EAC1B;EACA,IAAIA,IAAIA,CAACA,IAAwB;IAChC,IAAI,CAACL,QAAQ,CAACK,IAAI,GAAGA,IAAI;EAC1B;EAEA,IAAIkB,QAAQA,CAAA;IACX,OAAO,IAAI,CAACvB,QAAQ,CAACuB,QAAQ;EAC9B;EACA,IAAIA,QAAQA,CAACA,QAAwB;IACpC,IAAI,CAACvB,QAAQ,CAACuB,QAAQ,GAAGA,QAAQ;EAClC;EAEA,IAAIC,YAAYA,CAAA;IACf,OAAO,IAAI,CAACxB,QAAQ,CAACwB,YAAY;EAClC;EACA,IAAIA,YAAYA,CAACA,YAAoB;IACpC,IAAI,CAACxB,QAAQ,CAACwB,YAAY,GAAGA,YAAY;EAC1C;EAEA;;;EAGA,IAAIjB,cAAcA,CAAA;IACjB,OAAO,IAAI,CAACD,UAAU,CAACD,IAAI;EAC5B;EACA,IAAIE,cAAcA,CAACF,IAAwB;IAC1C,IAAI,CAACC,UAAU,CAACD,IAAI,GAAGA,IAAI;EAC5B;EAEA,IAAID,KAAKA,CAAA;IACR,OAAO,IAAI,CAACJ,QAAQ,CAACI,KAAK;EAC3B;EACA,IAAIA,KAAKA,CAACA,KAAc;IACvB,IAAI,CAACJ,QAAQ,CAACI,KAAK,GAAGA,KAAK;IAC3B,IAAI,CAACE,UAAU,CAACF,KAAK,GAAGA,KAAK;EAC9B;EAEA,IAAIqB,QAAQA,CAAA;IACX,OAAO,IAAI,CAACzB,QAAQ,CAACyB,QAAQ;EAC9B;EACA,IAAIA,QAAQA,CAACA,QAAkB;IAC9B,IAAI,CAACzB,QAAQ,CAACyB,QAAQ,GAAGA,QAAQ;EAClC;EAEMC,OAAOA,CAACC,MAAM,GAAG,IAAI;;MAC1B,OAAOrC,gBAAgB,CAAC,IAAI,EAAEqC,MAAM,CAAC;IACtC,CAAC;;EAED;;;EAGAC,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAAC1B,SAAS,CAAC0B,OAAO,EAAE;IACxB,IAAI,CAAC3B,MAAM,CAAC2B,OAAO,EAAE;IACrB,IAAI,CAACpB,WAAW,CAACoB,OAAO,EAAE;IAC1B,IAAI,CAAC5B,QAAQ,CAAC4B,OAAO,EAAE;IACvB,IAAI,CAACtB,UAAU,CAACsB,OAAO,EAAE;IACzB,IAAI,CAAC9B,eAAe,CAAC8B,OAAO,EAAE;IAC9B,IAAI,CAAChC,gBAAgB,CAACgC,OAAO,EAAE;IAC/B,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}