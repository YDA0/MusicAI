{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { TimeClass } from \"../../core/type/Time\";\nimport { TimelineValue } from \"../../core/util/TimelineValue\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { ToneWithContext } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination();\n * // repeated event every 8th note\n * Tone.Transport.scheduleRepeat((time) => {\n * \t// use the callback time to schedule events\n * \tosc.start(time).stop(time + 0.1);\n * }, \"8n\");\n * // transport must be started before it starts invoking events\n * Tone.Transport.start();\n * @category Core\n */\nexport class Transport extends ToneWithContext {\n  constructor() {\n    super(optionsFromArguments(Transport.getDefaults(), arguments));\n    this.name = \"Transport\";\n    //-------------------------------------\n    // \tLOOPING\n    //-------------------------------------\n    /**\n     * If the transport loops or not.\n     */\n    this._loop = new TimelineValue(false);\n    /**\n     * The loop start position in ticks\n     */\n    this._loopStart = 0;\n    /**\n     * The loop end position in ticks\n     */\n    this._loopEnd = 0;\n    //-------------------------------------\n    // \tTIMELINE EVENTS\n    //-------------------------------------\n    /**\n     * All the events in an object to keep track by ID\n     */\n    this._scheduledEvents = {};\n    /**\n     * The scheduled events.\n     */\n    this._timeline = new Timeline();\n    /**\n     * Repeated events\n     */\n    this._repeatedEvents = new IntervalTimeline();\n    /**\n     * All of the synced Signals\n     */\n    this._syncedSignals = [];\n    /**\n     * The swing amount\n     */\n    this._swingAmount = 0;\n    const options = optionsFromArguments(Transport.getDefaults(), arguments);\n    // CLOCK/TEMPO\n    this._ppq = options.ppq;\n    this._clock = new Clock({\n      callback: this._processTick.bind(this),\n      context: this.context,\n      frequency: 0,\n      units: \"bpm\"\n    });\n    this._bindClockEvents();\n    this.bpm = this._clock.frequency;\n    this._clock.frequency.multiplier = options.ppq;\n    this.bpm.setValueAtTime(options.bpm, 0);\n    readOnly(this, \"bpm\");\n    this._timeSignature = options.timeSignature;\n    // SWING\n    this._swingTicks = options.ppq / 2; // 8n\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      bpm: 120,\n      loopEnd: \"4m\",\n      loopStart: 0,\n      ppq: 192,\n      swing: 0,\n      swingSubdivision: \"8n\",\n      timeSignature: 4\n    });\n  }\n  //-------------------------------------\n  // \tTICKS\n  //-------------------------------------\n  /**\n   * called on every tick\n   * @param  tickTime clock relative tick time\n   */\n  _processTick(tickTime, ticks) {\n    // do the loop test\n    if (this._loop.get(tickTime)) {\n      if (ticks >= this._loopEnd) {\n        this.emit(\"loopEnd\", tickTime);\n        this._clock.setTicksAtTime(this._loopStart, tickTime);\n        ticks = this._loopStart;\n        this.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n        this.emit(\"loop\", tickTime);\n      }\n    }\n    // handle swing\n    if (this._swingAmount > 0 && ticks % this._ppq !== 0 &&\n    // not on a downbeat\n    ticks % (this._swingTicks * 2) !== 0) {\n      // add some swing\n      const progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n      const amount = Math.sin(progress * Math.PI) * this._swingAmount;\n      tickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n    }\n    // invoke the timeline events scheduled on this tick\n    this._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n  }\n  //-------------------------------------\n  // \tSCHEDULABLE EVENTS\n  //-------------------------------------\n  /**\n   * Schedule an event along the timeline.\n   * @param callback The callback to be invoked at the time.\n   * @param time The time to invoke the callback at.\n   * @return The id of the event which can be used for canceling the event.\n   * @example\n   * // schedule an event on the 16th measure\n   * Tone.Transport.schedule((time) => {\n   * \t// invoked on measure 16\n   * \tconsole.log(\"measure 16!\");\n   * }, \"16:0:0\");\n   */\n  schedule(callback, time) {\n    const event = new TransportEvent(this, {\n      callback,\n      time: new TransportTimeClass(this.context, time).toTicks()\n    });\n    return this._addEvent(event, this._timeline);\n  }\n  /**\n   * Schedule a repeated event along the timeline. The event will fire\n   * at the `interval` starting at the `startTime` and for the specified\n   * `duration`.\n   * @param  callback   The callback to invoke.\n   * @param  interval   The duration between successive callbacks. Must be a positive number.\n   * @param  startTime  When along the timeline the events should start being invoked.\n   * @param  duration How long the event should repeat.\n   * @return  The ID of the scheduled event. Use this to cancel the event.\n   * @example\n   * const osc = new Tone.Oscillator().toDestination().start();\n   * // a callback invoked every eighth note after the first measure\n   * Tone.Transport.scheduleRepeat((time) => {\n   * \tosc.start(time).stop(time + 0.1);\n   * }, \"8n\", \"1m\");\n   */\n  scheduleRepeat(callback, interval, startTime, duration = Infinity) {\n    const event = new TransportRepeatEvent(this, {\n      callback,\n      duration: new TimeClass(this.context, duration).toTicks(),\n      interval: new TimeClass(this.context, interval).toTicks(),\n      time: new TransportTimeClass(this.context, startTime).toTicks()\n    });\n    // kick it off if the Transport is started\n    // @ts-ignore\n    return this._addEvent(event, this._repeatedEvents);\n  }\n  /**\n   * Schedule an event that will be removed after it is invoked.\n   * @param callback The callback to invoke once.\n   * @param time The time the callback should be invoked.\n   * @returns The ID of the scheduled event.\n   */\n  scheduleOnce(callback, time) {\n    const event = new TransportEvent(this, {\n      callback,\n      once: true,\n      time: new TransportTimeClass(this.context, time).toTicks()\n    });\n    return this._addEvent(event, this._timeline);\n  }\n  /**\n   * Clear the passed in event id from the timeline\n   * @param eventId The id of the event.\n   */\n  clear(eventId) {\n    if (this._scheduledEvents.hasOwnProperty(eventId)) {\n      const item = this._scheduledEvents[eventId.toString()];\n      item.timeline.remove(item.event);\n      item.event.dispose();\n      delete this._scheduledEvents[eventId.toString()];\n    }\n    return this;\n  }\n  /**\n   * Add an event to the correct timeline. Keep track of the\n   * timeline it was added to.\n   * @returns the event id which was just added\n   */\n  _addEvent(event, timeline) {\n    this._scheduledEvents[event.id.toString()] = {\n      event,\n      timeline\n    };\n    timeline.add(event);\n    return event.id;\n  }\n  /**\n   * Remove scheduled events from the timeline after\n   * the given time. Repeated events will be removed\n   * if their startTime is after the given time\n   * @param after Clear all events after this time.\n   */\n  cancel(after = 0) {\n    const computedAfter = this.toTicks(after);\n    this._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n    this._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n    return this;\n  }\n  //-------------------------------------\n  // \tSTART/STOP/PAUSE\n  //-------------------------------------\n  /**\n   * Bind start/stop/pause events from the clock and emit them.\n   */\n  _bindClockEvents() {\n    this._clock.on(\"start\", (time, offset) => {\n      offset = new TicksClass(this.context, offset).toSeconds();\n      this.emit(\"start\", time, offset);\n    });\n    this._clock.on(\"stop\", time => {\n      this.emit(\"stop\", time);\n    });\n    this._clock.on(\"pause\", time => {\n      this.emit(\"pause\", time);\n    });\n  }\n  /**\n   * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n   */\n  get state() {\n    return this._clock.getStateAtTime(this.now());\n  }\n  /**\n   * Start the transport and all sources synced to the transport.\n   * @param  time The time when the transport should start.\n   * @param  offset The timeline offset to start the transport.\n   * @example\n   * // start the transport in one second starting at beginning of the 5th measure.\n   * Tone.Transport.start(\"+1\", \"4:0:0\");\n   */\n  start(time, offset) {\n    let offsetTicks;\n    if (isDefined(offset)) {\n      offsetTicks = this.toTicks(offset);\n    }\n    // start the clock\n    this._clock.start(time, offsetTicks);\n    return this;\n  }\n  /**\n   * Stop the transport and all sources synced to the transport.\n   * @param time The time when the transport should stop.\n   * @example\n   * Tone.Transport.stop();\n   */\n  stop(time) {\n    this._clock.stop(time);\n    return this;\n  }\n  /**\n   * Pause the transport and all sources synced to the transport.\n   */\n  pause(time) {\n    this._clock.pause(time);\n    return this;\n  }\n  /**\n   * Toggle the current state of the transport. If it is\n   * started, it will stop it, otherwise it will start the Transport.\n   * @param  time The time of the event\n   */\n  toggle(time) {\n    time = this.toSeconds(time);\n    if (this._clock.getStateAtTime(time) !== \"started\") {\n      this.start(time);\n    } else {\n      this.stop(time);\n    }\n    return this;\n  }\n  //-------------------------------------\n  // \tSETTERS/GETTERS\n  //-------------------------------------\n  /**\n   * The time signature as just the numerator over 4.\n   * For example 4/4 would be just 4 and 6/8 would be 3.\n   * @example\n   * // common time\n   * Tone.Transport.timeSignature = 4;\n   * // 7/8\n   * Tone.Transport.timeSignature = [7, 8];\n   * // this will be reduced to a single number\n   * Tone.Transport.timeSignature; // returns 3.5\n   */\n  get timeSignature() {\n    return this._timeSignature;\n  }\n  set timeSignature(timeSig) {\n    if (isArray(timeSig)) {\n      timeSig = timeSig[0] / timeSig[1] * 4;\n    }\n    this._timeSignature = timeSig;\n  }\n  /**\n   * When the Transport.loop = true, this is the starting position of the loop.\n   */\n  get loopStart() {\n    return new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n  }\n  set loopStart(startPosition) {\n    this._loopStart = this.toTicks(startPosition);\n  }\n  /**\n   * When the Transport.loop = true, this is the ending position of the loop.\n   */\n  get loopEnd() {\n    return new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n  }\n  set loopEnd(endPosition) {\n    this._loopEnd = this.toTicks(endPosition);\n  }\n  /**\n   * If the transport loops or not.\n   */\n  get loop() {\n    return this._loop.get(this.now());\n  }\n  set loop(loop) {\n    this._loop.set(loop, this.now());\n  }\n  /**\n   * Set the loop start and stop at the same time.\n   * @example\n   * // loop over the first measure\n   * Tone.Transport.setLoopPoints(0, \"1m\");\n   * Tone.Transport.loop = true;\n   */\n  setLoopPoints(startPosition, endPosition) {\n    this.loopStart = startPosition;\n    this.loopEnd = endPosition;\n    return this;\n  }\n  /**\n   * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n   */\n  get swing() {\n    return this._swingAmount;\n  }\n  set swing(amount) {\n    // scale the values to a normal range\n    this._swingAmount = amount;\n  }\n  /**\n   * Set the subdivision which the swing will be applied to.\n   * The default value is an 8th note. Value must be less\n   * than a quarter note.\n   */\n  get swingSubdivision() {\n    return new TicksClass(this.context, this._swingTicks).toNotation();\n  }\n  set swingSubdivision(subdivision) {\n    this._swingTicks = this.toTicks(subdivision);\n  }\n  /**\n   * The Transport's position in Bars:Beats:Sixteenths.\n   * Setting the value will jump to that position right away.\n   */\n  get position() {\n    const now = this.now();\n    const ticks = this._clock.getTicksAtTime(now);\n    return new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n  }\n  set position(progress) {\n    const ticks = this.toTicks(progress);\n    this.ticks = ticks;\n  }\n  /**\n   * The Transport's position in seconds\n   * Setting the value will jump to that position right away.\n   */\n  get seconds() {\n    return this._clock.seconds;\n  }\n  set seconds(s) {\n    const now = this.now();\n    const ticks = this._clock.frequency.timeToTicks(s, now);\n    this.ticks = ticks;\n  }\n  /**\n   * The Transport's loop position as a normalized value. Always\n   * returns 0 if the transport if loop is not true.\n   */\n  get progress() {\n    if (this.loop) {\n      const now = this.now();\n      const ticks = this._clock.getTicksAtTime(now);\n      return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The transports current tick position.\n   */\n  get ticks() {\n    return this._clock.ticks;\n  }\n  set ticks(t) {\n    if (this._clock.ticks !== t) {\n      const now = this.now();\n      // stop everything synced to the transport\n      if (this.state === \"started\") {\n        const ticks = this._clock.getTicksAtTime(now);\n        // schedule to start on the next tick, #573\n        const remainingTick = this._clock.frequency.getDurationOfTicks(Math.ceil(ticks) - ticks, now);\n        const time = now + remainingTick;\n        this.emit(\"stop\", time);\n        this._clock.setTicksAtTime(t, time);\n        // restart it with the new time\n        this.emit(\"start\", time, this._clock.getSecondsAtTime(time));\n      } else {\n        this._clock.setTicksAtTime(t, now);\n      }\n    }\n  }\n  /**\n   * Get the clock's ticks at the given time.\n   * @param  time  When to get the tick value\n   * @return The tick value at the given time.\n   */\n  getTicksAtTime(time) {\n    return Math.round(this._clock.getTicksAtTime(time));\n  }\n  /**\n   * Return the elapsed seconds at the given time.\n   * @param  time  When to get the elapsed seconds\n   * @return  The number of elapsed seconds\n   */\n  getSecondsAtTime(time) {\n    return this._clock.getSecondsAtTime(time);\n  }\n  /**\n   * Pulses Per Quarter note. This is the smallest resolution\n   * the Transport timing supports. This should be set once\n   * on initialization and not set again. Changing this value\n   * after other objects have been created can cause problems.\n   */\n  get PPQ() {\n    return this._clock.frequency.multiplier;\n  }\n  set PPQ(ppq) {\n    this._clock.frequency.multiplier = ppq;\n  }\n  //-------------------------------------\n  // \tSYNCING\n  //-------------------------------------\n  /**\n   * Returns the time aligned to the next subdivision\n   * of the Transport. If the Transport is not started,\n   * it will return 0.\n   * Note: this will not work precisely during tempo ramps.\n   * @param  subdivision  The subdivision to quantize to\n   * @return  The context time of the next subdivision.\n   * @example\n   * // the transport must be started, otherwise returns 0\n   * Tone.Transport.start();\n   * Tone.Transport.nextSubdivision(\"4n\");\n   */\n  nextSubdivision(subdivision) {\n    subdivision = this.toTicks(subdivision);\n    if (this.state !== \"started\") {\n      // if the transport's not started, return 0\n      return 0;\n    } else {\n      const now = this.now();\n      // the remainder of the current ticks and the subdivision\n      const transportPos = this.getTicksAtTime(now);\n      const remainingTicks = subdivision - transportPos % subdivision;\n      return this._clock.nextTickTime(remainingTicks, now);\n    }\n  }\n  /**\n   * Attaches the signal to the tempo control signal so that\n   * any changes in the tempo will change the signal in the same\n   * ratio.\n   *\n   * @param signal\n   * @param ratio Optionally pass in the ratio between the two signals.\n   * \t\t\tOtherwise it will be computed based on their current values.\n   */\n  syncSignal(signal, ratio) {\n    if (!ratio) {\n      // get the sync ratio\n      const now = this.now();\n      if (signal.getValueAtTime(now) !== 0) {\n        const bpm = this.bpm.getValueAtTime(now);\n        const computedFreq = 1 / (60 / bpm / this.PPQ);\n        ratio = signal.getValueAtTime(now) / computedFreq;\n      } else {\n        ratio = 0;\n      }\n    }\n    const ratioSignal = new Gain(ratio);\n    // @ts-ignore\n    this.bpm.connect(ratioSignal);\n    // @ts-ignore\n    ratioSignal.connect(signal._param);\n    this._syncedSignals.push({\n      initial: signal.value,\n      ratio: ratioSignal,\n      signal\n    });\n    signal.value = 0;\n    return this;\n  }\n  /**\n   * Unsyncs a previously synced signal from the transport's control.\n   * See Transport.syncSignal.\n   */\n  unsyncSignal(signal) {\n    for (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n      const syncedSignal = this._syncedSignals[i];\n      if (syncedSignal.signal === signal) {\n        syncedSignal.ratio.dispose();\n        syncedSignal.signal.value = syncedSignal.initial;\n        this._syncedSignals.splice(i, 1);\n      }\n    }\n    return this;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._clock.dispose();\n    writable(this, \"bpm\");\n    this._timeline.dispose();\n    this._repeatedEvents.dispose();\n    return this;\n  }\n}\nEmitter.mixin(Transport);\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(context => {\n  context.transport = new Transport({\n    context\n  });\n});\nonContextClose(context => {\n  context.transport.dispose();\n});","map":{"version":3,"names":["TimeClass","TimelineValue","onContextClose","onContextInit","Gain","ToneWithContext","TicksClass","TransportTimeClass","optionsFromArguments","Emitter","readOnly","writable","IntervalTimeline","Timeline","isArray","isDefined","Clock","TransportEvent","TransportRepeatEvent","Transport","constructor","getDefaults","arguments","name","_loop","_loopStart","_loopEnd","_scheduledEvents","_timeline","_repeatedEvents","_syncedSignals","_swingAmount","options","_ppq","ppq","_clock","callback","_processTick","bind","context","frequency","units","_bindClockEvents","bpm","multiplier","setValueAtTime","_timeSignature","timeSignature","_swingTicks","Object","assign","loopEnd","loopStart","swing","swingSubdivision","tickTime","ticks","get","emit","setTicksAtTime","getSecondsAtTime","progress","amount","Math","sin","PI","toSeconds","forEachAtTime","event","invoke","schedule","time","toTicks","_addEvent","scheduleRepeat","interval","startTime","duration","Infinity","scheduleOnce","once","clear","eventId","hasOwnProperty","item","toString","timeline","remove","dispose","id","add","cancel","after","computedAfter","forEachFrom","on","offset","state","getStateAtTime","now","start","offsetTicks","stop","pause","toggle","timeSig","startPosition","endPosition","loop","set","setLoopPoints","toNotation","subdivision","position","getTicksAtTime","toBarsBeatsSixteenths","seconds","s","timeToTicks","t","remainingTick","getDurationOfTicks","ceil","round","PPQ","nextSubdivision","transportPos","remainingTicks","nextTickTime","syncSignal","signal","ratio","getValueAtTime","computedFreq","ratioSignal","connect","_param","push","initial","value","unsyncSignal","i","length","syncedSignal","splice","mixin","transport"],"sources":["../../../../Tone/core/clock/Transport.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}