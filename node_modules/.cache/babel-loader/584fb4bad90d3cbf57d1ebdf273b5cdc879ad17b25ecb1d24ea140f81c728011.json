{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PulseOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n    this.name = \"PulseOscillator\";\n    /**\n     * gate the width amount\n     */\n    this._widthGate = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * Threshold the signal to turn it into a square\n     */\n    this._thresh = new WaveShaper({\n      context: this.context,\n      mapping: val => val <= 0 ? -1 : 1\n    });\n    const options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n    this.width = new Signal({\n      context: this.context,\n      units: \"audioRange\",\n      value: options.width\n    });\n    this._triangle = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: \"triangle\"\n    });\n    this.frequency = this._triangle.frequency;\n    this.detune = this._triangle.detune;\n    // connections\n    this._triangle.chain(this._thresh, this.output);\n    this.width.chain(this._widthGate, this._thresh);\n    readOnly(this, [\"width\", \"frequency\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      phase: 0,\n      type: \"pulse\",\n      width: 0.2\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    time = this.toSeconds(time);\n    this._triangle.start(time);\n    this._widthGate.gain.setValueAtTime(1, time);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    time = this.toSeconds(time);\n    this._triangle.stop(time);\n    // the width is still connected to the output.\n    // that needs to be stopped also\n    this._widthGate.gain.cancelScheduledValues(time);\n    this._widthGate.gain.setValueAtTime(0, time);\n  }\n  _restart(time) {\n    this._triangle.restart(time);\n    this._widthGate.gain.cancelScheduledValues(time);\n    this._widthGate.gain.setValueAtTime(1, time);\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n  get phase() {\n    return this._triangle.phase;\n  }\n  set phase(phase) {\n    this._triangle.phase = phase;\n  }\n  /**\n   * The type of the oscillator. Always returns \"pulse\".\n   */\n  get type() {\n    return \"pulse\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pulse\".\n   */\n  get baseType() {\n    return \"pulse\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * *Internal use* The carrier oscillator type is fed through the\n   * waveshaper node to create the pulse. Using different carrier oscillators\n   * changes oscillator's behavior.\n   */\n  set carrierType(type) {\n    this._triangle.type = type;\n  }\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up method.\n   */\n  dispose() {\n    super.dispose();\n    this._triangle.dispose();\n    this.width.dispose();\n    this._widthGate.dispose();\n    this._thresh.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["Gain","optionsFromArguments","readOnly","Signal","WaveShaper","Source","Oscillator","generateWaveform","PulseOscillator","constructor","getDefaults","arguments","name","_widthGate","context","gain","_thresh","mapping","val","options","width","units","value","_triangle","detune","frequency","onstop","phase","type","chain","output","Object","assign","_start","time","toSeconds","start","setValueAtTime","_stop","stop","cancelScheduledValues","_restart","restart","baseType","partials","partialCount","carrierType","asArray","length","dispose"],"sources":["../../../../Tone/source/oscillator/PulseOscillator.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}