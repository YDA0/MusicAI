{"ast":null,"code":"import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect } from \"./Effect\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * const dist = new Tone.Distortion(0.8).toDestination();\n * const fm = new Tone.FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\nexport class Distortion extends Effect {\n  constructor() {\n    super(optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n    this.name = \"Distortion\";\n    const options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n    this._shaper = new WaveShaper({\n      context: this.context,\n      length: 4096\n    });\n    this._distortion = options.distortion;\n    this.connectEffect(this._shaper);\n    this.distortion = options.distortion;\n    this.oversample = options.oversample;\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      distortion: 0.4,\n      oversample: \"none\"\n    });\n  }\n  /**\n   * The amount of distortion. Nominal range is between 0 and 1.\n   */\n  get distortion() {\n    return this._distortion;\n  }\n  set distortion(amount) {\n    this._distortion = amount;\n    const k = amount * 100;\n    const deg = Math.PI / 180;\n    this._shaper.setMap(x => {\n      if (Math.abs(x) < 0.001) {\n        // should output 0 when input is 0\n        return 0;\n      } else {\n        return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n      }\n    });\n  }\n  /**\n   * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n   */\n  get oversample() {\n    return this._shaper.oversample;\n  }\n  set oversample(oversampling) {\n    this._shaper.oversample = oversampling;\n  }\n  dispose() {\n    super.dispose();\n    this._shaper.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["optionsFromArguments","WaveShaper","Effect","Distortion","constructor","getDefaults","arguments","name","options","_shaper","context","length","_distortion","distortion","connectEffect","oversample","Object","assign","amount","k","deg","Math","PI","setMap","x","abs","oversampling","dispose"],"sources":["../../../Tone/effect/Distortion.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,MAAM,QAAuB,UAAU;AAOhD;;;;;;;;;;AAUA,OAAM,MAAOC,UAAW,SAAQD,MAAyB;EAmBxDE,YAAA;IAEC,KAAK,CAACJ,oBAAoB,CAACG,UAAU,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAnBxE,KAAAC,IAAI,GAAW,YAAY;IAoBnC,MAAMC,OAAO,GAAGR,oBAAoB,CAACG,UAAU,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,YAAY,CAAC,CAAC;IAEzF,IAAI,CAACG,OAAO,GAAG,IAAIR,UAAU,CAAC;MAC7BS,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,MAAM,EAAE;KACR,CAAC;IAEF,IAAI,CAACC,WAAW,GAAGJ,OAAO,CAACK,UAAU;IAErC,IAAI,CAACC,aAAa,CAAC,IAAI,CAACL,OAAO,CAAC;IAChC,IAAI,CAACI,UAAU,GAAGL,OAAO,CAACK,UAAU;IACpC,IAAI,CAACE,UAAU,GAAGP,OAAO,CAACO,UAAU;EACrC;EAEA,OAAOV,WAAWA,CAAA;IACjB,OAAOW,MAAM,CAACC,MAAM,CAACf,MAAM,CAACG,WAAW,EAAE,EAAE;MAC1CQ,UAAU,EAAE,GAAG;MACfE,UAAU,EAAE;KACZ,CAAC;EACH;EAEA;;;EAGA,IAAIF,UAAUA,CAAA;IACb,OAAO,IAAI,CAACD,WAAW;EACxB;EACA,IAAIC,UAAUA,CAACK,MAAM;IACpB,IAAI,CAACN,WAAW,GAAGM,MAAM;IACzB,MAAMC,CAAC,GAAGD,MAAM,GAAG,GAAG;IACtB,MAAME,GAAG,GAAGC,IAAI,CAACC,EAAE,GAAG,GAAG;IACzB,IAAI,CAACb,OAAO,CAACc,MAAM,CAAEC,CAAC,IAAI;MACzB,IAAIH,IAAI,CAACI,GAAG,CAACD,CAAC,CAAC,GAAG,KAAK,EAAE;QACxB;QACA,OAAO,CAAC;OACR,MAAM;QACN,OAAO,CAAC,CAAC,GAAGL,CAAC,IAAIK,CAAC,GAAG,EAAE,GAAGJ,GAAG,IAAIC,IAAI,CAACC,EAAE,GAAGH,CAAC,GAAGE,IAAI,CAACI,GAAG,CAACD,CAAC,CAAC,CAAC;;IAE7D,CAAC,CAAC;EACH;EAEA;;;EAGA,IAAIT,UAAUA,CAAA;IACb,OAAO,IAAI,CAACN,OAAO,CAACM,UAAU;EAC/B;EACA,IAAIA,UAAUA,CAACW,YAAY;IAC1B,IAAI,CAACjB,OAAO,CAACM,UAAU,GAAGW,YAAY;EACvC;EAEAC,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAAClB,OAAO,CAACkB,OAAO,EAAE;IACtB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}