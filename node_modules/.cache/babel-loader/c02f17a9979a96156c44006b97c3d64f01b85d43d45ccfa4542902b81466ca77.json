{"ast":null,"code":"import { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource } from \"../source/OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource extends OneShotSource {\n  constructor() {\n    super(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n    this.name = \"ToneConstantSource\";\n    /**\n     * The signal generator\n     */\n    this._source = this.context.createConstantSource();\n    const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n    connect(this._source, this._gainNode);\n    this.offset = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._source.offset,\n      units: options.units,\n      value: options.offset,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n  }\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      convert: true,\n      offset: 1,\n      units: \"number\"\n    });\n  }\n  /**\n   * Start the source node at the given time\n   * @param  time When to start the source\n   */\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n    this._startGain(computedTime);\n    this._source.start(computedTime);\n    return this;\n  }\n  _stopSource(time) {\n    this._source.stop(time);\n  }\n  dispose() {\n    super.dispose();\n    if (this.state === \"started\") {\n      this.stop();\n    }\n    this._source.disconnect();\n    this.offset.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["connect","Param","optionsFromArguments","OneShotSource","ToneConstantSource","constructor","getDefaults","arguments","name","_source","context","createConstantSource","options","_gainNode","offset","convert","param","units","value","minValue","maxValue","Object","assign","start","time","computedTime","toSeconds","log","_startGain","_stopSource","stop","dispose","state","disconnect"],"sources":["../../../Tone/signal/ToneConstantSource.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,OAAO,QAAQ,+BAA+B;AACvD,SAASC,KAAK,QAAQ,uBAAuB;AAE7C,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,aAAa,QAA8B,yBAAyB;AAU7E;;;;;AAKA,OAAM,MAAOC,kBAAyD,SAAQD,aAAkD;EAmB/HE,YAAA;IAEC,KAAK,CAACH,oBAAoB,CAACE,kBAAkB,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAnB5E,KAAAC,IAAI,GAAW,oBAAoB;IAE5C;;;IAGQ,KAAAC,OAAO,GAAG,IAAI,CAACC,OAAO,CAACC,oBAAoB,EAAE;IAepD,MAAMC,OAAO,GAAGV,oBAAoB,CAACE,kBAAkB,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC;IAE7FP,OAAO,CAAC,IAAI,CAACS,OAAO,EAAE,IAAI,CAACI,SAAS,CAAC;IAErC,IAAI,CAACC,MAAM,GAAG,IAAIb,KAAK,CAAC;MACvBS,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBK,OAAO,EAAEH,OAAO,CAACG,OAAO;MACxBC,KAAK,EAAE,IAAI,CAACP,OAAO,CAACK,MAAM;MAC1BG,KAAK,EAAEL,OAAO,CAACK,KAAK;MACpBC,KAAK,EAAEN,OAAO,CAACE,MAAM;MACrBK,QAAQ,EAAEP,OAAO,CAACO,QAAQ;MAC1BC,QAAQ,EAAER,OAAO,CAACQ;KAClB,CAAC;EACH;EAEA,OAAOd,WAAWA,CAAA;IACjB,OAAOe,MAAM,CAACC,MAAM,CAACnB,aAAa,CAACG,WAAW,EAAE,EAAE;MACjDS,OAAO,EAAE,IAAI;MACbD,MAAM,EAAE,CAAC;MACTG,KAAK,EAAE;KACP,CAAC;EACH;EAEA;;;;EAIAM,KAAKA,CAACC,IAAW;IAChB,MAAMC,YAAY,GAAG,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC;IACzC,IAAI,CAACG,GAAG,CAAC,OAAO,EAAEF,YAAY,CAAC;IAC/B,IAAI,CAACG,UAAU,CAACH,YAAY,CAAC;IAC7B,IAAI,CAAChB,OAAO,CAACc,KAAK,CAACE,YAAY,CAAC;IAChC,OAAO,IAAI;EACZ;EAEUI,WAAWA,CAACL,IAAc;IACnC,IAAI,CAACf,OAAO,CAACqB,IAAI,CAACN,IAAI,CAAC;EACxB;EAEAO,OAAOA,CAAA;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,IAAI,CAACC,KAAK,KAAK,SAAS,EAAE;MAC7B,IAAI,CAACF,IAAI,EAAE;;IAEZ,IAAI,CAACrB,OAAO,CAACwB,UAAU,EAAE;IACzB,IAAI,CAACnB,MAAM,CAACiB,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}