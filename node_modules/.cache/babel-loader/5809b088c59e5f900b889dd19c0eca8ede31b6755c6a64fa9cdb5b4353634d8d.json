{"ast":null,"code":"import { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n    this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n    this.override = true;\n    const options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    this.output = this._constantSource = new ToneConstantSource({\n      context: this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    this._constantSource.start(0);\n    this.input = this._param = this._constantSource.offset;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      units: \"number\",\n      value: 0\n    });\n  }\n  connect(destination, outputNum = 0, inputNum = 0) {\n    // start it only when connected to something\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._param.dispose();\n    this._constantSource.dispose();\n    return this;\n  }\n  //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // just a proxy for the ConstantSourceNode's offset AudioParam\n  // all docs are generated from AbstractParam.ts\n  //-------------------------------------\n  setValueAtTime(value, time) {\n    this._param.setValueAtTime(value, time);\n    return this;\n  }\n  getValueAtTime(time) {\n    return this._param.getValueAtTime(time);\n  }\n  setRampPoint(time) {\n    this._param.setRampPoint(time);\n    return this;\n  }\n  linearRampToValueAtTime(value, time) {\n    this._param.linearRampToValueAtTime(value, time);\n    return this;\n  }\n  exponentialRampToValueAtTime(value, time) {\n    this._param.exponentialRampToValueAtTime(value, time);\n    return this;\n  }\n  exponentialRampTo(value, rampTime, startTime) {\n    this._param.exponentialRampTo(value, rampTime, startTime);\n    return this;\n  }\n  linearRampTo(value, rampTime, startTime) {\n    this._param.linearRampTo(value, rampTime, startTime);\n    return this;\n  }\n  targetRampTo(value, rampTime, startTime) {\n    this._param.targetRampTo(value, rampTime, startTime);\n    return this;\n  }\n  exponentialApproachValueAtTime(value, time, rampTime) {\n    this._param.exponentialApproachValueAtTime(value, time, rampTime);\n    return this;\n  }\n  setTargetAtTime(value, startTime, timeConstant) {\n    this._param.setTargetAtTime(value, startTime, timeConstant);\n    return this;\n  }\n  setValueCurveAtTime(values, startTime, duration, scaling) {\n    this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n    return this;\n  }\n  cancelScheduledValues(time) {\n    this._param.cancelScheduledValues(time);\n    return this;\n  }\n  cancelAndHoldAtTime(time) {\n    this._param.cancelAndHoldAtTime(time);\n    return this;\n  }\n  rampTo(value, rampTime, startTime) {\n    this._param.rampTo(value, rampTime, startTime);\n    return this;\n  }\n  get value() {\n    return this._param.value;\n  }\n  set value(value) {\n    this._param.value = value;\n  }\n  get convert() {\n    return this._param.convert;\n  }\n  set convert(convert) {\n    this._param.convert = convert;\n  }\n  get units() {\n    return this._param.units;\n  }\n  get overridden() {\n    return this._param.overridden;\n  }\n  set overridden(overridden) {\n    this._param.overridden = overridden;\n  }\n  get maxValue() {\n    return this._param.maxValue;\n  }\n  get minValue() {\n    return this._param.minValue;\n  }\n  /**\n   * See [[Param.apply]].\n   */\n  apply(param) {\n    this._param.apply(param);\n    return this;\n  }\n}\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0);\n    // reset the value\n    destination.setValueAtTime(0, 0);\n    // mark the value as overridden\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n  connect(signal, destination, outputNum, inputNum);\n}","map":{"version":3,"names":["Param","ToneAudioNode","connect","isAudioParam","optionsFromArguments","ToneConstantSource","Signal","constructor","getDefaults","arguments","name","override","options","output","_constantSource","context","convert","offset","value","units","minValue","maxValue","start","input","_param","Object","assign","destination","outputNum","inputNum","connectSignal","dispose","setValueAtTime","time","getValueAtTime","setRampPoint","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","startTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","setTargetAtTime","timeConstant","setValueCurveAtTime","values","duration","scaling","cancelScheduledValues","cancelAndHoldAtTime","rampTo","overridden","apply","param","signal"],"sources":["../../../Tone/signal/Signal.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}