{"ast":null,"code":"import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource {\n  constructor() {\n    super(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"ToneOscillatorNode\";\n    /**\n     * The oscillator\n     */\n    this._oscillator = this.context.createOscillator();\n    this._internalChannels = [this._oscillator];\n    const options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    connect(this._oscillator, this._gainNode);\n    this.type = options.type;\n    this.frequency = new Param({\n      context: this.context,\n      param: this._oscillator.frequency,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Param({\n      context: this.context,\n      param: this._oscillator.detune,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, [\"frequency\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      type: \"sine\"\n    });\n  }\n  /**\n   * Start the oscillator node at the given time\n   * @param  time When to start the oscillator\n   */\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n    this._startGain(computedTime);\n    this._oscillator.start(computedTime);\n    return this;\n  }\n  _stopSource(time) {\n    this._oscillator.stop(time);\n  }\n  /**\n   * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n   * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n   */\n  setPeriodicWave(periodicWave) {\n    this._oscillator.setPeriodicWave(periodicWave);\n    return this;\n  }\n  /**\n   * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n   */\n  get type() {\n    return this._oscillator.type;\n  }\n  set type(type) {\n    this._oscillator.type = type;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    if (this.state === \"started\") {\n      this.stop();\n    }\n    this._oscillator.disconnect();\n    this.frequency.dispose();\n    this.detune.dispose();\n    return this;\n  }\n}","map":{"version":3,"names":["connect","Param","optionsFromArguments","OneShotSource","readOnly","ToneOscillatorNode","constructor","getDefaults","arguments","name","_oscillator","context","createOscillator","_internalChannels","options","_gainNode","type","frequency","param","units","value","detune","Object","assign","start","time","computedTime","toSeconds","log","_startGain","_stopSource","stop","setPeriodicWave","periodicWave","dispose","state","disconnect"],"sources":["../../../../Tone/source/oscillator/ToneOscillatorNode.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}