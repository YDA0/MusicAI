{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext } from \"./ToneWithContext\";\nimport { assert, warn } from \"../util/Debug\";\n/**\n * ToneAudioNode is the base class for classes which process audio.\n */\nexport class ToneAudioNode extends ToneWithContext {\n  constructor() {\n    super(...arguments);\n    /**\n     * The name of the class\n     */\n    this.name = \"ToneAudioNode\";\n    /**\n     * List all of the node that must be set to match the ChannelProperties\n     */\n    this._internalChannels = [];\n  }\n  /**\n   * The number of inputs feeding into the AudioNode.\n   * For source nodes, this will be 0.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfInputs);\n   */\n  get numberOfInputs() {\n    if (isDefined(this.input)) {\n      if (isAudioParam(this.input) || this.input instanceof Param) {\n        return 1;\n      } else {\n        return this.input.numberOfInputs;\n      }\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The number of outputs of the AudioNode.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfOutputs);\n   */\n  get numberOfOutputs() {\n    if (isDefined(this.output)) {\n      return this.output.numberOfOutputs;\n    } else {\n      return 0;\n    }\n  }\n  //-------------------------------------\n  // AUDIO PROPERTIES\n  //-------------------------------------\n  /**\n   * Used to decide which nodes to get/set properties on\n   */\n  _isAudioNode(node) {\n    return isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n  }\n  /**\n   * Get all of the audio nodes (either internal or input/output) which together\n   * make up how the class node responds to channel input/output\n   */\n  _getInternalNodes() {\n    const nodeList = this._internalChannels.slice(0);\n    if (this._isAudioNode(this.input)) {\n      nodeList.push(this.input);\n    }\n    if (this._isAudioNode(this.output)) {\n      if (this.input !== this.output) {\n        nodeList.push(this.output);\n      }\n    }\n    return nodeList;\n  }\n  /**\n   * Set the audio options for this node such as channelInterpretation\n   * channelCount, etc.\n   * @param options\n   */\n  _setChannelProperties(options) {\n    const nodeList = this._getInternalNodes();\n    nodeList.forEach(node => {\n      node.channelCount = options.channelCount;\n      node.channelCountMode = options.channelCountMode;\n      node.channelInterpretation = options.channelInterpretation;\n    });\n  }\n  /**\n   * Get the current audio options for this node such as channelInterpretation\n   * channelCount, etc.\n   */\n  _getChannelProperties() {\n    const nodeList = this._getInternalNodes();\n    assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n    // use the first node to get properties\n    // they should all be the same\n    const node = nodeList[0];\n    return {\n      channelCount: node.channelCount,\n      channelCountMode: node.channelCountMode,\n      channelInterpretation: node.channelInterpretation\n    };\n  }\n  /**\n   * channelCount is the number of channels used when up-mixing and down-mixing\n   * connections to any inputs to the node. The default value is 2 except for\n   * specific nodes where its value is specially determined.\n   */\n  get channelCount() {\n    return this._getChannelProperties().channelCount;\n  }\n  set channelCount(channelCount) {\n    const props = this._getChannelProperties();\n    // merge it with the other properties\n    this._setChannelProperties(Object.assign(props, {\n      channelCount\n    }));\n  }\n  /**\n   * channelCountMode determines how channels will be counted when up-mixing and\n   * down-mixing connections to any inputs to the node.\n   * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n   * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n   * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n   * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n   */\n  get channelCountMode() {\n    return this._getChannelProperties().channelCountMode;\n  }\n  set channelCountMode(channelCountMode) {\n    const props = this._getChannelProperties();\n    // merge it with the other properties\n    this._setChannelProperties(Object.assign(props, {\n      channelCountMode\n    }));\n  }\n  /**\n   * channelInterpretation determines how individual channels will be treated\n   * when up-mixing and down-mixing connections to any inputs to the node.\n   * The default value is \"speakers\".\n   */\n  get channelInterpretation() {\n    return this._getChannelProperties().channelInterpretation;\n  }\n  set channelInterpretation(channelInterpretation) {\n    const props = this._getChannelProperties();\n    // merge it with the other properties\n    this._setChannelProperties(Object.assign(props, {\n      channelInterpretation\n    }));\n  }\n  //-------------------------------------\n  // CONNECTIONS\n  //-------------------------------------\n  /**\n   * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n   * @param destination The output to connect to\n   * @param outputNum The output to connect from\n   * @param inputNum The input to connect to\n   */\n  connect(destination, outputNum = 0, inputNum = 0) {\n    connect(this, destination, outputNum, inputNum);\n    return this;\n  }\n  /**\n   * Connect the output to the context's destination node.\n   * @example\n   * const osc = new Tone.Oscillator(\"C2\").start();\n   * osc.toDestination();\n   */\n  toDestination() {\n    this.connect(this.context.destination);\n    return this;\n  }\n  /**\n   * Connect the output to the context's destination node.\n   * See [[toDestination]]\n   * @deprecated\n   */\n  toMaster() {\n    warn(\"toMaster() has been renamed toDestination()\");\n    return this.toDestination();\n  }\n  /**\n   * disconnect the output\n   */\n  disconnect(destination, outputNum = 0, inputNum = 0) {\n    disconnect(this, destination, outputNum, inputNum);\n    return this;\n  }\n  /**\n   * Connect the output of this node to the rest of the nodes in series.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/handdrum-loop.mp3\");\n   * player.autostart = true;\n   * const filter = new Tone.AutoFilter(4).start();\n   * const distortion = new Tone.Distortion(0.5);\n   * // connect the player to the filter, distortion and then to the master output\n   * player.chain(filter, distortion, Tone.Destination);\n   */\n  chain(...nodes) {\n    connectSeries(this, ...nodes);\n    return this;\n  }\n  /**\n   * connect the output of this node to the rest of the nodes in parallel.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n   * player.autostart = true;\n   * const pitchShift = new Tone.PitchShift(4).toDestination();\n   * const filter = new Tone.Filter(\"G5\").toDestination();\n   * // connect a node to the pitch shift and filter in parallel\n   * player.fan(pitchShift, filter);\n   */\n  fan(...nodes) {\n    nodes.forEach(node => this.connect(node));\n    return this;\n  }\n  /**\n   * Dispose and disconnect\n   */\n  dispose() {\n    super.dispose();\n    if (isDefined(this.input)) {\n      if (this.input instanceof ToneAudioNode) {\n        this.input.dispose();\n      } else if (isAudioNode(this.input)) {\n        this.input.disconnect();\n      }\n    }\n    if (isDefined(this.output)) {\n      if (this.output instanceof ToneAudioNode) {\n        this.output.dispose();\n      } else if (isAudioNode(this.output)) {\n        this.output.disconnect();\n      }\n    }\n    this._internalChannels = [];\n    return this;\n  }\n}\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes) {\n  const first = nodes.shift();\n  nodes.reduce((prev, current) => {\n    if (prev instanceof ToneAudioNode) {\n      prev.connect(current);\n    } else if (isAudioNode(prev)) {\n      connect(prev, current);\n    }\n    return current;\n  }, first);\n}\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n  assert(isDefined(srcNode), \"Cannot connect from undefined node\");\n  assert(isDefined(dstNode), \"Cannot connect to undefined node\");\n  if (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n    assert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n  }\n  assert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n  // resolve the input of the dstNode\n  while (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n    if (isDefined(dstNode.input)) {\n      dstNode = dstNode.input;\n    }\n  }\n  while (srcNode instanceof ToneAudioNode) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  }\n  // make the connection\n  if (isAudioParam(dstNode)) {\n    srcNode.connect(dstNode, outputNumber);\n  } else {\n    srcNode.connect(dstNode, outputNumber, inputNumber);\n  }\n}\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n  // resolve the destination node\n  if (isDefined(dstNode)) {\n    while (dstNode instanceof ToneAudioNode) {\n      dstNode = dstNode.input;\n    }\n  }\n  // resolve the src node\n  while (!isAudioNode(srcNode)) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  }\n  if (isAudioParam(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber);\n  } else if (isAudioNode(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber, inputNumber);\n  } else {\n    srcNode.disconnect();\n  }\n}","map":{"version":3,"names":["isAudioNode","isAudioParam","isDefined","Param","ToneWithContext","assert","warn","ToneAudioNode","constructor","name","_internalChannels","numberOfInputs","input","numberOfOutputs","output","_isAudioNode","node","_getInternalNodes","nodeList","slice","push","_setChannelProperties","options","forEach","channelCount","channelCountMode","channelInterpretation","_getChannelProperties","length","props","Object","assign","connect","destination","outputNum","inputNum","toDestination","context","toMaster","disconnect","chain","nodes","connectSeries","fan","dispose","first","shift","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber"],"sources":["../../../../Tone/core/context/ToneAudioNode.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}