{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { assert } from \"../core/util/Debug\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Tone.Signal(440).connect(timesTwo);\n * @category Signal\n */\nexport class WaveShaper extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n    this.name = \"WaveShaper\";\n    /**\n     * the waveshaper node\n     */\n    this._shaper = this.context.createWaveShaper();\n    /**\n     * The input to the waveshaper node.\n     */\n    this.input = this._shaper;\n    /**\n     * The output from the waveshaper node\n     */\n    this.output = this._shaper;\n    const options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n    if (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n      this.curve = Float32Array.from(options.mapping);\n    } else if (isFunction(options.mapping)) {\n      this.setMap(options.mapping, options.length);\n    }\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      length: 1024\n    });\n  }\n  /**\n   * Uses a mapping function to set the value of the curve.\n   * @param mapping The function used to define the values.\n   *                The mapping function take two arguments:\n   *                the first is the value at the current position\n   *                which goes from -1 to 1 over the number of elements\n   *                in the curve array. The second argument is the array position.\n   * @example\n   * const shaper = new Tone.WaveShaper();\n   * // map the input signal from [-1, 1] to [0, 10]\n   * shaper.setMap((val, index) => (val + 1) * 5);\n   */\n  setMap(mapping, length = 1024) {\n    const array = new Float32Array(length);\n    for (let i = 0, len = length; i < len; i++) {\n      const normalized = i / (len - 1) * 2 - 1;\n      array[i] = mapping(normalized, i);\n    }\n    this.curve = array;\n    return this;\n  }\n  /**\n   * The array to set as the waveshaper curve. For linear curves\n   * array length does not make much difference, but for complex curves\n   * longer arrays will provide smoother interpolation.\n   */\n  get curve() {\n    return this._shaper.curve;\n  }\n  set curve(mapping) {\n    this._shaper.curve = mapping;\n  }\n  /**\n   * Specifies what type of oversampling (if any) should be used when\n   * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n   */\n  get oversample() {\n    return this._shaper.oversample;\n  }\n  set oversample(oversampling) {\n    const isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n    assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n    this._shaper.oversample = oversampling;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._shaper.disconnect();\n    return this;\n  }\n}","map":{"version":3,"names":["optionsFromArguments","isArray","isFunction","assert","Signal","SignalOperator","WaveShaper","constructor","Object","assign","getDefaults","arguments","name","_shaper","context","createWaveShaper","input","output","options","mapping","Float32Array","curve","from","setMap","length","array","i","len","normalized","oversample","oversampling","isOverSampleType","some","str","includes","dispose","disconnect"],"sources":["../../../Tone/signal/WaveShaper.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}