{"ast":null,"code":"/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log } from \"./util/Debug\";\n/**\n * @class  Tone is the base class of all other classes.\n * @category Core\n * @constructor\n */\nexport class Tone {\n  constructor() {\n    //-------------------------------------\n    // \tDEBUGGING\n    //-------------------------------------\n    /**\n     * Set this debug flag to log all events that happen in this class.\n     */\n    this.debug = false;\n    //-------------------------------------\n    // \tDISPOSING\n    //-------------------------------------\n    /**\n     * Indicates if the instance was disposed\n     */\n    this._wasDisposed = false;\n  }\n  /**\n   * Returns all of the default options belonging to the class.\n   */\n  static getDefaults() {\n    return {};\n  }\n  /**\n   * Prints the outputs to the console log for debugging purposes.\n   * Prints the contents only if either the object has a property\n   * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n   * is set to the name of the class.\n   * @example\n   * const osc = new Tone.Oscillator();\n   * // prints all logs originating from this oscillator\n   * osc.debug = true;\n   * // calls to start/stop will print in the console\n   * osc.start();\n   */\n  log(...args) {\n    // if the object is either set to debug = true\n    // or if there is a string on the Tone.global.with the class name\n    if (this.debug || theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS) {\n      log(this, ...args);\n    }\n  }\n  /**\n   * disconnect and dispose.\n   */\n  dispose() {\n    this._wasDisposed = true;\n    return this;\n  }\n  /**\n   * Indicates if the instance was disposed. 'Disposing' an\n   * instance means that all of the Web Audio nodes that were\n   * created for the instance are disconnected and freed for garbage collection.\n   */\n  get disposed() {\n    return this._wasDisposed;\n  }\n  /**\n   * Convert the class to a string\n   * @example\n   * const osc = new Tone.Oscillator();\n   * console.log(osc.toString());\n   */\n  toString() {\n    return this.name;\n  }\n}\n/**\n * The version number semver\n */\nTone.version = version;","map":{"version":3,"names":["version","theWindow","log","Tone","constructor","debug","_wasDisposed","getDefaults","args","toString","TONE_DEBUG_CLASS","dispose","disposed","name"],"sources":["../../../Tone/core/Tone.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;AAMA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,GAAG,QAAQ,cAAc;AASlC;;;;;AAKA,OAAM,MAAgBC,IAAI;EAA1BC,YAAA;IAmBC;IACA;IACA;IAEA;;;IAGA,KAAAC,KAAK,GAAG,KAAK;IAsBb;IACA;IACA;IAEA;;;IAGQ,KAAAC,YAAY,GAAG,KAAK;EA4B7B;EAvEC;;;EAGA,OAAOC,WAAWA,CAAA;IACjB,OAAO,EAAE;EACV;EAWA;;;;;;;;;;;;EAYUL,GAAGA,CAAC,GAAGM,IAAW;IAC3B;IACA;IACA,IAAI,IAAI,CAACH,KAAK,IAAKJ,SAAS,IAAI,IAAI,CAACQ,QAAQ,EAAE,KAAKR,SAAS,CAACS,gBAAiB,EAAE;MAChFR,GAAG,CAAC,IAAI,EAAE,GAAGM,IAAI,CAAC;;EAEpB;EAWA;;;EAGAG,OAAOA,CAAA;IACN,IAAI,CAACL,YAAY,GAAG,IAAI;IACxB,OAAO,IAAI;EACZ;EAEA;;;;;EAKA,IAAIM,QAAQA,CAAA;IACX,OAAO,IAAI,CAACN,YAAY;EACzB;EAEA;;;;;;EAMAG,QAAQA,CAAA;IACP,OAAO,IAAI,CAACI,IAAI;EACjB;;AAhFA;;;AAGOV,IAAA,CAAAH,OAAO,GAAWA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}